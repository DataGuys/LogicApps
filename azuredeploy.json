{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "logicAppName": {
            "type": "string",
            "defaultValue": "xdr-high-incident-workflow",
            "metadata": {
                "description": "Name of the Logic App"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources"
            }
        },
        "teamsConnectionName": {
            "type": "string",
            "defaultValue": "teams-connection",
            "metadata": {
                "description": "Name of the Teams API connection"
            }
        },
        "teamsGroupId": {
            "type": "string",
            "metadata": {
                "description": "Teams Group ID where notifications will be sent"
            }
        },
        "teamsChannelId": {
            "type": "string",
            "metadata": {
                "description": "Teams Channel ID where notifications will be sent"
            }
        },
        "recurrenceInterval": {
            "type": "int",
            "defaultValue": 10,
            "metadata": {
                "description": "Recurrence interval in minutes"
            }
        },
        "timeZone": {
            "type": "string",
            "defaultValue": "Pacific Standard Time",
            "metadata": {
                "description": "Time zone for the recurrence schedule"
            }
        },
        "jiraBaseUrl": {
            "type": "string",
            "defaultValue": "https://your-company.atlassian.net",
            "metadata": {
                "description": "Base URL for Jira instance"
            }
        },
        "jiraProjectKey": {
            "type": "string",
            "defaultValue": "SEC",
            "metadata": {
                "description": "Jira project key for security incidents"
            }
        },
        "desktopResponseUrl": {
            "type": "string",
            "defaultValue": "https://your-logic-app-url.com/workflows/desktop-response-automation/triggers/manual/paths/invoke",
            "metadata": {
                "description": "URL for desktop response automation workflow"
            }
        },
        "serverP2ResponseUrl": {
            "type": "string",
            "defaultValue": "https://your-logic-app-url.com/workflows/server-p2-response/triggers/manual/paths/invoke",
            "metadata": {
                "description": "URL for server P2 response workflow"
            }
        },
        "autoInvestigationUrl": {
            "type": "string",
            "defaultValue": "https://your-logic-app-url.com/automate/investigate",
            "metadata": {
                "description": "URL for auto investigation workflow"
            }
        }
    },
    "variables": {
        "teamsConnectionId": "[resourceId('Microsoft.Web/connections', parameters('teamsConnectionName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('teamsConnectionName')]",
            "location": "[parameters('location')]",
            "properties": {
                "displayName": "Microsoft Teams",
                "api": {
                    "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'teams')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('logicAppName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('teamsConnectionName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "interval": "[parameters('recurrenceInterval')]",
                                "frequency": "Minute",
                                "timeZone": "[parameters('timeZone')]"
                            },
                            "evaluatedRecurrence": {
                                "interval": "[parameters('recurrenceInterval')]",
                                "frequency": "Minute",
                                "timeZone": "[parameters('timeZone')]"
                            },
                            "type": "Recurrence",
                            "conditions": []
                        }
                    },
                    "actions": {
                        "Get_High_Severity_Incidents": {
                            "runAfter": {},
                            "type": "Http",
                            "inputs": {
                                "uri": "https://graph.microsoft.com/v1.0/security/incidents?$filter=severity%20eq%20'high'%20and%20createdDateTime%20ge%20@{formatDateTime(addDays(utcNow(), -1), 'yyyy-MM-dd')}T00:00:00Z&$expand=alerts",
                                "method": "GET",
                                "headers": {
                                    "Content-Type": "application/json",
                                    "Accept": "application/json"
                                },
                                "authentication": {
                                    "type": "ManagedServiceIdentity",
                                    "audience": "https://graph.microsoft.com"
                                }
                            }
                        },
                        "Parse_Incidents_Response": {
                            "runAfter": {
                                "Get_High_Severity_Incidents": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ParseJson",
                            "inputs": {
                                "content": "@body('Get_High_Severity_Incidents')",
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "value": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "id": { "type": "string" },
                                                    "displayName": { "type": ["string", "null"] },
                                                    "incidentWebUrl": { "type": ["string", "null"] },
                                                    "severity": { "type": "string" },
                                                    "status": { "type": "string" },
                                                    "createdDateTime": { "type": "string" },
                                                    "lastUpdateDateTime": { "type": "string" },
                                                    "assignedTo": { "type": ["string", "null"] },
                                                    "classification": { "type": ["string", "null"] },
                                                    "determination": { "type": ["string", "null"] },
                                                    "redirectIncidentId": { "type": ["string", "null"] },
                                                    "tenantId": { "type": "string" },
                                                    "summary": { "type": ["string", "null"] },
                                                    "description": { "type": ["string", "null"] },
                                                    "lastModifiedBy": { "type": ["string", "null"] },
                                                    "resolvingComment": { "type": ["string", "null"] },
                                                    "customTags": { "type": "array", "items": { "type": "string" } },
                                                    "systemTags": { "type": "array", "items": { "type": "string" } },
                                                    "alerts": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "id": { "type": "string" },
                                                                "title": { "type": ["string", "null"] },
                                                                "createdDateTime": { "type": "string" },
                                                                "category": { "type": ["string", "null"] },
                                                                "severity": { "type": ["string", "null"] },
                                                                "mitreTechniques": { "type": "array", "items": { "type": "string" } },
                                                                "evidence": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "@@odata.type": { "type": "string" },
                                                                            "createdDateTime": { "type": "string" },
                                                                            "deviceDnsName": { "type": ["string", "null"] },
                                                                            "riskScore": { "type": ["string", "null"] },
                                                                            "fileDetails": {
                                                                                "type": ["object", "null"],
                                                                                "properties": {
                                                                                    "fileName": { "type": ["string", "null"] },
                                                                                    "filePath": { "type": ["string", "null"] }
                                                                                }
                                                                            },
                                                                            "processCommandLine": { "type": ["string", "null"] },
                                                                            "imageFile": {
                                                                                "type": ["object", "null"],
                                                                                "properties": {
                                                                                    "fileName": { "type": ["string", "null"] }
                                                                                }
                                                                            },
                                                                            "userAccount": {
                                                                                "type": ["object", "null"],
                                                                                "properties": {
                                                                                    "displayName": { "type": ["string", "null"] },
                                                                                    "accountName": { "type": ["string", "null"] },
                                                                                    "userSid": { "type": ["string", "null"] }
                                                                                }
                                                                            },
                                                                            "registryKey": { "type": ["string", "null"] },
                                                                            "registryHive": { "type": ["string", "null"] },
                                                                            "url": { "type": ["string", "null"] },
                                                                            "verdict": { "type": ["string", "null"] },
                                                                            "detectionStatus": { "type": ["string", "null"] }
                                                                        }
                                                                    }
                                                                },
                                                                "comments": { "type": "array" }
                                                            },
                                                            "required": ["id", "severity", "status", "createdDateTime", "tenantId", "lastUpdateDateTime"]
                                                        }
                                                    },
                                                    "lastModifiedDateTime": { "type": "string" }
                                                },
                                                "required": ["id", "severity", "status", "createdDateTime", "tenantId", "lastUpdateDateTime"]
                                            }
                                        }
                                    },
                                    "required": ["value"]
                                }
                            }
                        },
                        "Initialize_variables": {
                            "runAfter": {
                                "Parse_Incidents_Response": ["Succeeded"]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [{
                                    "name": "EvidenceTimeline",
                                    "type": "string"
                                }]
                            }
                        },
                        "For_each_High_Incident": {
                            "foreach": "@body('Parse_Incidents_Response')?['value']",
                            "actions": {
                                "Reset_EvidenceTimeline": {
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "EvidenceTimeline",
                                        "value": ""
                                    }
                                },
                                "Initialize_MITRE_String": {
                                    "runAfter": {
                                        "Reset_EvidenceTimeline": ["Succeeded"]
                                    },
                                    "type": "Compose",
                                    "inputs": ""
                                },
                                "For_each_Alert": {
                                    "foreach": "@items('For_each_High_Incident')?['alerts']",
                                    "actions": {
                                        "Check_Alert_Date": {
                                            "actions": {
                                                "Append_Alert_Details": {
                                                    "type": "AppendToStringVariable",
                                                    "inputs": {
                                                        "name": "EvidenceTimeline",
                                                        "value": "• Alert: @{items('For_each_Alert')?['title']}\n  Time: @{formatDateTime(items('For_each_Alert')?['createdDateTime'], 'G')}\n  Severity: @{items('For_each_Alert')?['severity']}\n  Category: @{coalesce(items('For_each_Alert')?['category'], 'Unknown')}\n  Threat: @{coalesce(items('For_each_Alert')?['threatDisplayName'], 'Unknown')}\n"
                                                    }
                                                },
                                                "For_each_Evidence": {
                                                    "foreach": "@items('For_each_Alert')?['evidence']",
                                                    "actions": {
                                                        "Switch_on_Evidence_Type": {
                                                            "cases": {
                                                                "#microsoft.graph.security.deviceEvidence": {
                                                                    "case": "#microsoft.graph.security.deviceEvidence",
                                                                    "actions": {
                                                                        "Append_Device_Evidence": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "EvidenceTimeline",
                                                                                "value": "  - Device: @{items('For_each_Evidence')?['deviceDnsName']} (Risk: @{coalesce(items('For_each_Evidence')?['riskScore'], 'N/A')})\n"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "#microsoft.graph.security.fileEvidence": {
                                                                    "case": "#microsoft.graph.security.fileEvidence",
                                                                    "actions": {
                                                                        "Append_File_Evidence": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "EvidenceTimeline",
                                                                                "value": "  - File: @{items('For_each_Evidence')?['fileDetails']?['fileName']} (Status: @{coalesce(items('For_each_Evidence')?['detectionStatus'], 'Unknown')}, Verdict: @{coalesce(items('For_each_Evidence')?['verdict'], 'Unknown')})\n"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "#microsoft.graph.security.processEvidence": {
                                                                    "case": "#microsoft.graph.security.processEvidence",
                                                                    "actions": {
                                                                        "Append_Process_Evidence": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "EvidenceTimeline",
                                                                                "value": "  - Process: @{items('For_each_Evidence')?['imageFile']?['fileName']} by @{coalesce(items('For_each_Evidence')?['userAccount']?['displayName'], items('For_each_Evidence')?['userAccount']?['accountName'], 'N/A')}\n"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "#microsoft.graph.security.registryKeyEvidence": {
                                                                    "case": "#microsoft.graph.security.registryKeyEvidence",
                                                                    "actions": {
                                                                        "Append_Registry_Evidence": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "EvidenceTimeline",
                                                                                "value": "  - Registry: @{items('For_each_Evidence')?['registryHive']}\\@{items('For_each_Evidence')?['registryKey']}\n"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "#microsoft.graph.security.urlEvidence": {
                                                                    "case": "#microsoft.graph.security.urlEvidence",
                                                                    "actions": {
                                                                        "Append_URL_Evidence": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "EvidenceTimeline",
                                                                                "value": "  - URL: @{items('For_each_Evidence')?['url']} (Verdict: @{coalesce(items('For_each_Evidence')?['verdict'], 'N/A')})\n"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                "#microsoft.graph.security.userEvidence": {
                                                                    "case": "#microsoft.graph.security.userEvidence",
                                                                    "actions": {
                                                                        "Append_User_Evidence": {
                                                                            "type": "AppendToStringVariable",
                                                                            "inputs": {
                                                                                "name": "EvidenceTimeline",
                                                                                "value": "  - User: @{coalesce(items('For_each_Evidence')?['userAccount']?['displayName'], items('For_each_Evidence')?['userAccount']?['accountName'], 'N/A')}\n"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "default": { "actions": {} },
                                                            "expression": "@coalesce(items('For_each_Evidence')?['@@odata.type'], 'Unknown')",
                                                            "type": "Switch"
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Append_Alert_Details": ["Succeeded"]
                                                    },
                                                    "type": "Foreach"
                                                },
                                                "Handle_MITRE_Techniques": {
                                                    "runAfter": {
                                                        "For_each_Evidence": ["Succeeded"]
                                                    },
                                                    "type": "Compose",
                                                    "inputs": "@{if(empty(items('For_each_Alert')?['mitreTechniques']), '', concat('  MITRE: ', join(items('For_each_Alert')?['mitreTechniques'], ', ')))}"
                                                },
                                                "Append_MITRE_if_exists": {
                                                    "actions": {
                                                        "Append_MITRE_String": {
                                                            "type": "AppendToStringVariable",
                                                            "inputs": {
                                                                "name": "EvidenceTimeline",
                                                                "value": "@{outputs('Handle_MITRE_Techniques')}\n"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Handle_MITRE_Techniques": ["Succeeded"]
                                                    },
                                                    "expression": {
                                                        "and": [{
                                                            "not": {
                                                                "equals": ["@outputs('Handle_MITRE_Techniques')", ""]
                                                            }
                                                        }]
                                                    },
                                                    "type": "If"
                                                },
                                                "Add_Alert_Separator": {
                                                    "runAfter": {
                                                        "Append_MITRE_if_exists": ["Succeeded"]
                                                    },
                                                    "type": "AppendToStringVariable",
                                                    "inputs": {
                                                        "name": "EvidenceTimeline",
                                                        "value": "\n"
                                                    }
                                                }
                                            },
                                            "else": { "actions": {} },
                                            "expression": {
                                                "and": [{
                                                    "equals": [
                                                        "@formatDateTime(items('For_each_Alert')?['createdDateTime'], 'yyyy-MM-dd')",
                                                        "@formatDateTime(items('For_each_High_Incident')?['createdDateTime'], 'yyyy-MM-dd')"
                                                    ]
                                                }]
                                            },
                                            "type": "If"
                                        }
                                    },
                                    "runAfter": {
                                        "Initialize_MITRE_String": ["Succeeded"]
                                    },
                                    "type": "Foreach"
                                },
                                "Check_If_Evidence_Exists": {
                                    "actions": {
                                        "Post_message": {
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['teams']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "body": {
                                                    "subject": "🚨 HIGH SEVERITY INCIDENT: @{coalesce(items('For_each_High_Incident')?['displayName'], concat('Incident ', items('For_each_High_Incident')?['id']))}",
                                                    "body": {
                                                        "content": "[concat('<div style=''font-family: Arial, sans-serif;''>\n<h2 style=''color: #d9534f;''>🚨 HIGH SEVERITY INCIDENT DETECTED</h2>\n\n<div style=''background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px;''>\n<h3>Incident Details</h3>\n<table style=''width: 100%;''>\n<tr><td style=''font-weight: bold; width: 150px;''>Incident:</td><td>@{coalesce(items(''For_each_High_Incident'')?[''displayName''], ''Unnamed Incident'')}</td></tr>\n<tr><td style=''font-weight: bold;''>ID:</td><td>@{items(''For_each_High_Incident'')?[''id'']}</td></tr>\n<tr><td style=''font-weight: bold;''>Severity:</td><td><span style=''color: #d9534f; font-weight: bold;''>@{items(''For_each_High_Incident'')?[''severity'']}</span></td></tr>\n<tr><td style=''font-weight: bold;''>Status:</td><td>@{items(''For_each_High_Incident'')?[''status'']}</td></tr>\n<tr><td style=''font-weight: bold;''>Created:</td><td>@{formatDateTime(items(''For_each_High_Incident'')?[''createdDateTime''], ''yyyy-MM-dd hh:mm tt'')}</td></tr>\n<tr><td style=''font-weight: bold;''>Last Updated:</td><td>@{formatDateTime(items(''For_each_High_Incident'')?[''lastUpdateDateTime''], ''yyyy-MM-dd hh:mm tt'')}</td></tr>\n<tr><td style=''font-weight: bold;''>Assigned To:</td><td>@{coalesce(items(''For_each_High_Incident'')?[''assignedTo''], ''Unassigned'')}</td></tr>\n<tr><td style=''font-weight: bold;''>Classification:</td><td>@{coalesce(items(''For_each_High_Incident'')?[''classification''], ''Unclassified'')}</td></tr>\n</table>\n</div>\n\n<div style=''background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px;''>\n<p><strong>Description:</strong> @{coalesce(items(''For_each_High_Incident'')?[''description''], items(''For_each_High_Incident'')?[''summary''], ''No description available'')}</p>\n<p><strong>Last Modified By:</strong> @{coalesce(items(''For_each_High_Incident'')?[''lastModifiedBy''], ''System'')}</p>\n<p><strong>Determination:</strong> @{coalesce(items(''For_each_High_Incident'')?[''determination''], ''Under Investigation'')}</p>\n</div>\n\n<div style=''background-color: #e8f5e9; padding: 15px; border-radius: 5px; margin-bottom: 20px;''>\n<h3>🔎 Attack Story Timeline</h3>\n<pre style=''white-space: pre-wrap; font-family: Consolas, monospace;''>@{variables(''EvidenceTimeline'')}</pre>\n</div>\n\n<div style=''margin-top: 20px; background-color: #f8f9fa; padding: 20px; border-radius: 8px; border: 1px solid #e0e0e0;''>\n<h4 style=''margin-top: 0; color: #000;''>Actions:</h4>\n<a href=''@{coalesce(items(''For_each_High_Incident'')?[''incidentWebUrl''], concat(''https://security.microsoft.com/incidents/'', items(''For_each_High_Incident'')?[''id''])))}'' style=''background-color: #0066cc; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: block; margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center;''>🔗 View Incident Details</a>\n<a href=''', parameters('jiraBaseUrl'), '/secure/CreateIssue!default.jspa?projectKey=', parameters('jiraProjectKey'), '&summary=', '@{encodeUriComponent(concat(''Security Incident: '', coalesce(items(''For_each_High_Incident'')?[''displayName''], ''Incident '', items(''For_each_High_Incident'')?[''id''])))}', '&description=', '@{encodeUriComponent(concat(''Incident ID: '', items(''For_each_High_Incident'')?[''id'']))}', ''' style=''background-color: #6c757d; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: block; margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center;''>📝 Create Jira Issue</a>\n<a href=''', parameters('desktopResponseUrl'), '?incidentId=@{items(''For_each_High_Incident'')?[''id'']}'' style=''background-color: #dc3545; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: block; margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center;''>🖥️ Run Desktop Response</a>\n<a href=''', parameters('serverP2ResponseUrl'), '?incidentId=@{items(''For_each_High_Incident'')?[''id'']}'' style=''background-color: #ffc107; color: #212529; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: block; margin-bottom: 10px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center;''>🖧 Start P2 for Servers</a>\n<a href=''', parameters('autoInvestigationUrl'), '?incidentId=@{items(''For_each_High_Incident'')?[''id'']}'' style=''background-color: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: block; box-shadow: 0 2px 4px rgba(0,0,0,0.1); text-align: center;''>🔍 Start Auto Investigation</a>\n</div>\n</div>')]",
                                                        "contentType": "html"
                                                    },
                                                    "groupId": "[parameters('teamsGroupId')]",
                                                    "channelId": "[parameters('teamsChannelId')]"
                                                },
                                                "path": "/beta/teams/@{encodeURIComponent('[parameters('teamsGroupId')]')}/channels/@{encodeURIComponent('[parameters('teamsChannelId')]')}/messages"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "For_each_Alert": ["Succeeded"]
                                    },
                                    "else": { "actions": {} },
                                    "expression": {
                                        "and": [{
                                            "greater": ["@length(variables('EvidenceTimeline'))", 0]
                                        }]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Initialize_variables": ["Succeeded"]
                            },
                            "type": "Foreach"
                        }
                    },
                    "outputs": {},
                    "parameters": {
                        "$connections": {
                            "type": "Object",
                            "defaultValue": {}
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "teams": {
                                "connectionId": "[variables('teamsConnectionId')]",
                                "connectionName": "[parameters('teamsConnectionName')]",
                                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'teams')]"
                            }
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "logicAppName": {
            "type": "string",
            "value": "[parameters('logicAppName')]"
        },
        "resourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Logic/workflows', parameters('logicAppName'))]"
        }
    }
}
